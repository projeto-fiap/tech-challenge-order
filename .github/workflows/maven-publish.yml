name: pipeline

on:
  push:
  pull_request:
    types:
      - closed
      - opened
      - synchronize
      - reopened

jobs:
#  build:
#    name: Build
#    runs-on: ubuntu-latest
#    permissions:
#      contents: read
#      packages: write
#
#    steps:
#      - uses: actions/checkout@v4
#      - name: Install Java and Maven
#        uses: actions/setup-java@v4
#        with:
#          java-version: '17'
#          distribution: 'adopt'
#          cache: maven
#
#      - name: Cache Maven packages
#        uses: actions/cache@v4
#        with:
#          path: ~/.m2
#          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
#          restore-keys: ${{ runner.os }}-m2
#
#      - name: Clean and Compile
#        run: mvn clean compile
#
#  unit-tests:
#    name: Unit Tests
#    runs-on: ubuntu-latest
#    needs: build
#    permissions:
#      contents: read
#      packages: write
#
#    steps:
#      - uses: actions/checkout@v4
#
#      - name: Install Java and Maven
#        uses: actions/setup-java@v4
#        with:
#          java-version: '17'
#          distribution: 'adopt'
#          cache: maven
#
#      - name: Cache Maven packages
#        uses: actions/cache@v4
#        with:
#          path: ~/.m2
#          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
#          restore-keys: ${{ runner.os }}-m2
#
#      - name: Clear Maven cache
#        run: mvn dependency:purge-local-repository -DactTransitively=false -DreResolve=false
#
#      - name: Run Unit Tests
#        run: mvn clean test -Dtest=!tech.integration.order.**
#
#      - name: Run Sonar Analysis
#        env:
#          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#        run: mvn org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.token=$SONAR_TOKEN
#
#      - name: Verify Test Results
#        if: ${{ failure() }}
#        run: echo "Unit tests or Sonar analysis failed. Check the logs for details."
#  integrated-tests:
#    name: Integrated Tests
#    runs-on: ubuntu-latest
#    needs: unit-tests
#    permissions:
#      contents: read
#      packages: write
#
#    steps:
#      - uses: actions/checkout@v4
#      - name: Install Java and Maven
#        uses: actions/setup-java@v4
#        with:
#          java-version: '17'
#          distribution: 'adopt'
#          cache: maven
#
#      - name: Cache Maven packages
#        uses: actions/cache@v4
#        with:
#          path: ~/.m2
#          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
#          restore-keys: ${{ runner.os }}-m2
#
#      - name: Integrated Tests
#        env:
#          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#          SECRET_KEY: ${{ secrets.SECRET_KEY }}
#        run: mvn '-Dtest=tech.integration.order.**' test
#  bdd-tests:
#    name: BDD Tests
#    runs-on: ubuntu-latest
#    needs: unit-tests
#    permissions:
#      contents: read
#      packages: write
#
#    steps:
#      - uses: actions/checkout@v4
#      - name: Install Java and Maven
#        uses: actions/setup-java@v4
#        with:
#          java-version: '17'
#          distribution: 'adopt'
#          cache: maven
#
#      - name: Cache Maven packages
#        uses: actions/cache@v4
#        with:
#          path: ~/.m2
#          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
#          restore-keys: ${{ runner.os }}-m2
#
#      - name: Run BDD Tests
#        env:
#          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#        run: mvn test '-Dtest=tech.features.RunCucumberTest'
#  analysis-sonarqube:
#    name: Quality Gate
#    runs-on: ubuntu-latest
#    needs: unit-tests
#    steps:
#      - uses: actions/checkout@v4
#        with:
#          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
#      - name: Sonar Build Breaker
#        env:
#          GITHUB_REF_NAME: ${{ github.ref_name }}
#        uses: jkumar19/sonar-build-breaker@v1.0.0
#        with:
#          sonar_url: "https://sonarcloud.io"
#          sonar_branch: ${{ env.GITHUB_REF_NAME }}
#          sonar_token: ${{ secrets.SONAR_TOKEN }}
#          project_key: "projeto-fiap_tech-challenge-order"

  send-docker-hub:
    name: Send Docker Hub
    runs-on: ubuntu-latest
#    needs:
#      - analysis-sonarqube
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      - name: Clone Repository
        run: git clone https://github.com/projeto-fiap/tech-challenge-order.git && cd tech-challenge-order && docker build . -t matheuspatricio0/projeto-fiap-order:latest
      - name: Push Docker image
        run: docker push matheuspatricio0/projeto-fiap-order:latest

  deploy-kubernetes:
    name: Deploy Kubernetes
    runs-on: ubuntu-latest
    needs: send-docker-hub
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
      - name: Update Kube Config
        run: aws eks update-kubeconfig --name kubernetes-tech-challenge --region us-east-1
      - name: Current Context
        run: kubectl config current-context
      - name: Deploy Kubernetes Resources
        run: |
          kubectl apply -f src/main/resources/deploy/k8s/tech-challenge-order-deployment.yaml -n default-namespace
          kubectl apply -f src/main/resources/deploy/k8s/hpa-tech-challenge-order.yaml -n default-namespace
          kubectl apply -f src/main/resources/deploy/k8s/service-tech-challenge-order.yaml -n default-namespace