name: pipeline

on:
  push:
  pull_request:
    types:
      - closed
      - opened
      - synchronize
      - reopened

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v4
      - name: Install Java and Maven
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'adopt'
          cache: maven

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Clean and Compile
        run: mvn clean compile

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v4

      - name: Install Java and Maven
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'adopt'
          cache: maven

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Clear Maven cache
        run: mvn dependency:purge-local-repository -DactTransitively=false -DreResolve=false

      - name: Run Unit Tests
        run: mvn clean test -Dtest=!tech.integration.challenge.**

      - name: Run Sonar Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.token=$SONAR_TOKEN

      - name: Verify Test Results
        if: ${{ failure() }}
        run: echo "Unit tests or Sonar analysis failed. Check the logs for details."
  integrated-tests:
    name: Integrated Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v4
      - name: Install Java and Maven
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'adopt'
          cache: maven

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Integrated Tests
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
        run: mvn '-Dtest=tech.integration.order.**' test
  bdd-tests:
    name: BDD Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v4
      - name: Install Java and Maven
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'adopt'
          cache: maven

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run BDD Tests
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn test '-Dtest=tech.features.RunCucumberTest'
  analysis-sonarqube:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK (se necessário)
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Install jq (para processar JSON)
        run: sudo apt-get install -y jq

      - name: Sonar Build Breaker
        env:
          GITHUB_REF_NAME: ${{ github.ref_name }}
        uses: jkumar19/sonar-build-breaker@v1.0.0
        with:
          sonar_url: "https://sonarcloud.io"
          sonar_branch: ${{ env.GITHUB_REF_NAME }}
          sonar_token: ${{ secrets.SONAR_TOKEN }}
          project_key: "projeto-fiap_tech-challenge-order"

      - name: Fetch SonarQube Quality Gate Details
        if: failure() # Executa apenas se o passo anterior falhar
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_URL: "https://sonarcloud.io"
          PROJECT_KEY: "projeto-fiap_tech-challenge-order"
          BRANCH_NAME: ${{ env.GITHUB_REF_NAME }}
        run: |
          echo "Fetching SonarQube Quality Gate details..."
          
          # Busca o ID da análise mais recente
          ANALYSIS_ID=$(curl -s -u $SONAR_TOKEN: "$SONAR_URL/api/project_analyses/search?project=$PROJECT_KEY&branch=$BRANCH_NAME" | jq -r '.analyses[0].key')
          if [ -z "$ANALYSIS_ID" ]; then
            echo "Failed to fetch analysis ID."
            exit 1
          fi

          # Busca o status do Quality Gate
          QUALITY_GATE_STATUS=$(curl -s -u $SONAR_TOKEN: "$SONAR_URL/api/qualitygates/project_status?analysisId=$ANALYSIS_ID" | jq -r '.projectStatus.status')
          if [ "$QUALITY_GATE_STATUS" != "OK" ]; then
            echo "Quality Gate failed. Details:"
            curl -s -u $SONAR_TOKEN: "$SONAR_URL/api/qualitygates/project_status?analysisId=$ANALYSIS_ID" | jq '.projectStatus.conditions'
          else
            echo "Quality Gate passed."
          fi

  send-docker-hub:
    name: Deploy PRD
    runs-on: ubuntu-latest
    needs:
      - analysis-sonarqube
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      - name: Clone Repository
        run: git clone https://github.com/projeto-fiap/-order.git && cd tech-challenge-order && docker build . -t matheuspatricio0/projeto-fiap:latest
      - name: Push Docker image
        run: docker push matheuspatricio0/projeto-fiap:latest

  deploy-kubernetes:
    name: Deploy Kubernetes
    runs-on: ubuntu-latest
    needs: send-docker-hub
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}

      - name: Update Kube Config
        run: aws eks update-kubeconfig --name kubernetes-tech-challenge-order --region us-east-1

      - name: Current Context
        run: kubectl config current-context

      - name: Create Kubernetes Namespace
        run: |
          kubectl create namespace default-namespace || echo "Namespace already exists"

      - name: Deploy Kubernetes Resources
        run: |
          kubectl apply -f src/main/resources/deploy/k8s/keycloak-deployment.yaml -n default-namespace --validate=false
          kubectl apply -f src/main/resources/deploy/k8s/service-keycloak.yaml -n default-namespace --validate=false
          kubectl apply -f src/main/resources/deploy/k8s/hpa-keycloak.yaml -n default-namespace --validate=false